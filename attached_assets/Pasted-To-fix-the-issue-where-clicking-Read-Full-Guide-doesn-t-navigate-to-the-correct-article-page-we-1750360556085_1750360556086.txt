To fix the issue where clicking "Read Full Guide →" doesn't navigate to the correct article page, we’ll use a click handler with useNavigate from wouter, assuming you're using a simple React + Wouter routing setup.

Here’s how to do it step by step.

✅ Step 1: Ensure Your Routes Are Configured
In your App.tsx or main router file:

tsx
Copy
Edit
import { Route } from 'wouter';
import ArticlesPage from './pages/ArticlesPage';
import ArticleDetail from './pages/ArticleDetail';

function App() {
  return (
    <>
      <Route path="/" component={ArticlesPage} />
      <Route path="/article/:id" component={ArticleDetail} />
    </>
  );
}

export default App;
✅ Step 2: Update the "Read Full Guide" Button in articles-section.tsx
Instead of using a <Link> or an inline onClick, use useNavigate:

tsx
Copy
Edit
import { useNavigate } from 'wouter';

const ArticleCard = ({ id, title, description, date, category, readTime }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    console.log("Article clicked:", id);
    navigate(`/article/${id}`);
  };

  return (
    <div className="rounded-xl shadow-md bg-white p-6">
      <p className="text-sm text-gray-500">{category} • {date}</p>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-gray-600 mb-4">{description}</p>
      <button
        onClick={handleClick}
        className="text-blue-600 font-semibold hover:underline"
      >
        Read Full Guide →
      </button>
      <p className="text-sm text-gray-400 mt-2">{readTime}</p>
    </div>
  );
};
✅ Step 3: Create the ArticleDetail.tsx Page
This will receive the article ID from the route.

tsx
Copy
Edit
import { useParams } from 'wouter';
import fullArticles from '../data/fullArticles'; // your full content array

export default function ArticleDetail() {
  const { id } = useParams();
  const article = fullArticles.find((item) => item.id === id);

  if (!article) {
    return <div className="p-8">Article not found.</div>;
  }

  return (
    <div className="max-w-3xl mx-auto p-8">
      <p className="text-sm text-gray-500">{article.category} • {article.date}</p>
      <h1 className="text-3xl font-bold mb-4">{article.title}</h1>
      <div className="text-gray-700 whitespace-pre-wrap">{article.content}</div>
    </div>
  );
}
✅ Step 4: Store Full Content (Simple Option)
Create a file like data/fullArticles.ts:

tsx
Copy
Edit
const fullArticles = [
  {
    id: '1',
    title: 'Best Porcelain Tiles of 2025',
    date: 'Jan 15, 2025',
    category: 'Buyer\'s Guide',
    content: `Full article text goes here... (Paste from your text document)`
  },
  {
    id: '2',
    title: 'Top Quartz Slabs Compared',
    date: 'Jan 12, 2025',
    category: 'Comparison',
    content: `Full article text goes here...`
  },
  // Add the rest...
];

export default fullArticles;
✅ Final Tip
Make sure:

Your article IDs match (id="1" in the button must match /article/1)

Your router handles dynamic paths

You're not using <a> tags with href unless you reload the page intentionally